/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Indexes;
import db.Keys;
import db.Public;
import db.tables.records.WaybillpositionsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Waybillpositions extends TableImpl<WaybillpositionsRecord> {

    private static final long serialVersionUID = -1091960143;

    /**
     * The reference instance of <code>public.waybillpositions</code>
     */
    public static final Waybillpositions WAYBILLPOSITIONS = new Waybillpositions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WaybillpositionsRecord> getRecordType() {
        return WaybillpositionsRecord.class;
    }

    /**
     * The column <code>public.waybillpositions.id</code>.
     */
    public final TableField<WaybillpositionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.waybillpositions.price</code>.
     */
    public final TableField<WaybillpositionsRecord, Integer> PRICE = createField("price", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.waybillpositions.nomenclature</code>.
     */
    public final TableField<WaybillpositionsRecord, String> NOMENCLATURE = createField("nomenclature", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.waybillpositions.quantity</code>.
     */
    public final TableField<WaybillpositionsRecord, Integer> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.waybillpositions.waybillid</code>.
     */
    public final TableField<WaybillpositionsRecord, Integer> WAYBILLID = createField("waybillid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.waybillpositions</code> table reference
     */
    public Waybillpositions() {
        this(DSL.name("waybillpositions"), null);
    }

    /**
     * Create an aliased <code>public.waybillpositions</code> table reference
     */
    public Waybillpositions(String alias) {
        this(DSL.name(alias), WAYBILLPOSITIONS);
    }

    /**
     * Create an aliased <code>public.waybillpositions</code> table reference
     */
    public Waybillpositions(Name alias) {
        this(alias, WAYBILLPOSITIONS);
    }

    private Waybillpositions(Name alias, Table<WaybillpositionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Waybillpositions(Name alias, Table<WaybillpositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Waybillpositions(Table<O> child, ForeignKey<O, WaybillpositionsRecord> key) {
        super(child, key, WAYBILLPOSITIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WAYBILLPOSITIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WaybillpositionsRecord> getPrimaryKey() {
        return Keys.WAYBILLPOSITIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WaybillpositionsRecord>> getKeys() {
        return Arrays.<UniqueKey<WaybillpositionsRecord>>asList(Keys.WAYBILLPOSITIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WaybillpositionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WaybillpositionsRecord, ?>>asList(Keys.WAYBILLPOSITIONS__WAYBILLPOSITIONS_NOMENCLATURE_FKEY, Keys.WAYBILLPOSITIONS__WAYBILLPOSITIONS_WAYBILLID_FKEY);
    }

    public Nomenclatures nomenclatures() {
        return new Nomenclatures(this, Keys.WAYBILLPOSITIONS__WAYBILLPOSITIONS_NOMENCLATURE_FKEY);
    }

    public Waybill waybill() {
        return new Waybill(this, Keys.WAYBILLPOSITIONS__WAYBILLPOSITIONS_WAYBILLID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Waybillpositions as(String alias) {
        return new Waybillpositions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Waybillpositions as(Name alias) {
        return new Waybillpositions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Waybillpositions rename(String name) {
        return new Waybillpositions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Waybillpositions rename(Name name) {
        return new Waybillpositions(name, null);
    }
}
