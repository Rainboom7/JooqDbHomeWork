/*
 * This file is generated by jOOQ.
 */
package db.tables.records;


import db.tables.Organizations;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationsRecord extends UpdatableRecordImpl<OrganizationsRecord> implements Record3<String, Integer, Integer> {

    private static final long serialVersionUID = -1344707084;

    /**
     * Setter for <code>public.organizations.organization</code>.
     */
    public OrganizationsRecord setOrganization(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.organizations.organization</code>.
     */
    public String getOrganization() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.organizations.inn</code>.
     */
    public OrganizationsRecord setInn(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.organizations.inn</code>.
     */
    public Integer getInn() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.organizations.checking</code>.
     */
    public OrganizationsRecord setChecking(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.organizations.checking</code>.
     */
    public Integer getChecking() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Organizations.ORGANIZATIONS.ORGANIZATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Organizations.ORGANIZATIONS.INN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Organizations.ORGANIZATIONS.CHECKING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getOrganization();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getInn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getChecking();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getOrganization();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getInn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getChecking();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganizationsRecord value1(String value) {
        setOrganization(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganizationsRecord value2(Integer value) {
        setInn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganizationsRecord value3(Integer value) {
        setChecking(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganizationsRecord values(String value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrganizationsRecord
     */
    public OrganizationsRecord() {
        super(Organizations.ORGANIZATIONS);
    }

    /**
     * Create a detached, initialised OrganizationsRecord
     */
    public OrganizationsRecord(String organization, Integer inn, Integer checking) {
        super(Organizations.ORGANIZATIONS);

        set(0, organization);
        set(1, inn);
        set(2, checking);
    }
}
